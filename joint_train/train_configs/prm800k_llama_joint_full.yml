model_id: 'meta-llama/Llama-3.1-8B-Instruct'
train_data_path: './synth_data/prm800k_train_reprocessed.json'
eval_data_path: './synth_data/prm800k_phase2_eval.json'
max_length: 600
train_label_last_n: 3 # only compute loss on last three tokens
eval_label_last_n: 1 # we only want to evaluate on last token
wandb_project: 'prm_train'
# lora_config: # these are just default values
#   r: 16
#   lora_alpha: 32
#   lora_dropout: 0.05
#   task_type: 'CAUSAL_LM'
training_args:
  output_dir: './runs/prm800k_llama_joint_full'
  learning_rate: 1.0e-5
  gradient_accumulation_steps: 8
  eval_accumulation_steps: 1
  lr_scheduler_type: 'cosine' 
  warmup_ratio: 0.3
  bf16: true
  gradient_checkpointing: true
  # optim: adamw_apex_fused # apparently fastest version of adamw, requires installing nvidia apex
  per_device_train_batch_size: 2
  per_device_eval_batch_size: 4
  num_train_epochs: 1
  weight_decay: 0.01
  eval_strategy: 'steps'
  eval_steps: 20
  eval_on_start: true
  logging_steps: 1
  save_strategy: 'steps' # set to 'steps' if want to save every save_steps steps
  save_steps: 500 #set it small so can test saving
  save_total_limit: 1
  load_best_model_at_end: false
  push_to_hub: false
  # hub_strategy: 'checkpoint'
  hub_token: '' # put in huggingface access token
  seed: 908932403
  data_seed: 289245
  use_liger_kernel: true # can decrease memory, works with llama/mistral, should set to true on server, requires pip install liger-kernel